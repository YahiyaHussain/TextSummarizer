{"version":3,"sources":["App.js","index.js"],"names":["styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","registerRootComponent","React","useState","value","onChangeText","prediction","onChangePrediction","View","style","Text","TextInput","maxLength","height","borderColor","borderWidth","text","onSubmitEditing","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","console","log","responseText","statusText","cleanedText","replace","data","send","Button","title","width","onPress","StatusBar"],"mappings":"2NA8EA,IAAMA,EAASC,IAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNC,gBAAiB,OACjBC,WAAY,SACZC,eAAgB,YC5EpBC,aDHe,WAAgB,IAAD,EACEC,IAAMC,SAAS,eADjB,WACrBC,EADqB,KACdC,EADc,OAEaH,IAAMC,SAAS,wBAF5B,WAErBG,EAFqB,KAETC,EAFS,KAG5B,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAOhB,EAAOG,WAClB,kBAACc,EAAA,EAAD,0FAEA,kBAACC,EAAA,EAAD,CAAWC,UAAW,IAAMH,MAAO,CAAEI,OAAQ,GAAIC,YAAa,OAAQC,YAAa,GAAKX,MAAOA,EAAOC,aAAc,SAAAW,GAAI,OAAIX,EAAaW,IACzIC,gBAAiB,WACfV,EAAmB,cACjB,IAEIW,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAHC,qEAKVF,EAAIG,iBAAiB,eAAgB,oBAGrCH,EAAII,mBAAqB,WACA,IAAnBJ,EAAIK,aACa,MAAfL,EAAIM,QACNC,QAAQC,IAAI,oBACZD,QAAQC,IAAIR,EAAIS,cAChBpB,EAAmBW,EAAIS,gBAEtBF,QAAQC,IAAI,QAASR,EAAIU,YACzBrB,EAAmB,4CAK1B,IAAIsB,EAAczB,EAAM0B,QAAQ,MAAM,KAQlCC,EAAO,cAFXF,GADAA,GADAA,GADAA,GADAA,GADAA,EAAcA,EAAYC,QAAQ,MAAO,MACfA,QAAQ,MAAO,MACfA,QAAQ,MAAO,MACfA,QAAQ,MAAO,MACfA,QAAQ,MAAO,MACfA,QAAQ,MAAO,MAEL,KACpCZ,EAAIc,KAAKD,MAKb,kBAACE,EAAA,EAAD,CAAQC,MAAO,sCAAuCzB,MAAO,CAAC0B,MAAO,IAAKtB,OAAQ,KAAKuB,QACrF,WACE7B,EAAmB,cACnB,IAEIW,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAHC,qEAKVF,EAAIG,iBAAiB,eAAgB,oBAErCH,EAAII,mBAAqB,WACA,IAAnBJ,EAAIK,aACJE,QAAQC,IAAIR,EAAIM,QAChBC,QAAQC,IAAIR,EAAIS,cAChBpB,EAAmBW,EAAIS,gBAG7B,IAAII,EAAO,aAAa3B,EAAM,KAC9Bc,EAAIc,KAAKD,MAIb,kBAACrB,EAAA,EAAD,KAAOJ,GAEP,kBAAC+B,EAAA,EAAD,CAAW5B,MAAM,e","file":"static/js/app.fb1cb8b8.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { TextInput, Button, StyleSheet, Text, View } from 'react-native';\n\nexport default function App() {\n  const [value, onChangeText] = React.useState('write in me');\n  const [prediction, onChangePrediction] = React.useState('future prediction...');\n  return (\n    <View style={styles.container}>\n      <Text>Enter in Text to have it Summarized (Only 6000 characters can be sent at a time)!</Text>\n      \n      <TextInput maxLength={6000} style={{ height: 40, borderColor: 'gray', borderWidth: 1 }} value={value} onChangeText={text => onChangeText(text)}\n      onSubmitEditing={() => {\n        onChangePrediction(\"loading...\")\n          var url = \"https://ipczl1r729.execute-api.us-east-1.amazonaws.com/summarizer\";\n\n          var xhr = new XMLHttpRequest();\n          xhr.open(\"POST\", url);\n\n          xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n\n          xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n              if (xhr.status === 200) {\n                console.log(\"Succes returned:\")\n                console.log(xhr.responseText);\n                onChangePrediction(xhr.responseText);\n              } else {\n                 console.log(\"Error\", xhr.statusText);\n                 onChangePrediction(\"ERROR: Text doesn't have enough words\");\n              }\n\n            }};\n          \n          var cleanedText = value.replace(/\\n/g,' ');\n          cleanedText = cleanedText.replace(/\\\"/g, ' ');\n          cleanedText = cleanedText.replace(/\\'/g, ' ');\n          cleanedText = cleanedText.replace(/\\{/g, ' ');\n          cleanedText = cleanedText.replace(/\\}/g, ' ');\n          cleanedText = cleanedText.replace(/\\(/g, ' ');\n          cleanedText = cleanedText.replace(/\\)/g, ' ');\n\n          var data = '{\"text\": \"'+cleanedText+'\"}';\n          xhr.send(data);\n      }}\n      >\n      </TextInput>\n\n      <Button title={\"Press me to summarize inputted text\"} style={{width: 400, height: 500}}onPress={\n        () => {\n          onChangePrediction(\"loading...\")\n          var url = \"https://ipczl1r729.execute-api.us-east-1.amazonaws.com/summarizer\";\n\n          var xhr = new XMLHttpRequest();\n          xhr.open(\"POST\", url);\n\n          xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n          xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                console.log(xhr.status);\n                console.log(xhr.responseText);\n                onChangePrediction(xhr.responseText);\n            }};\n\n          var data = '{\"text\": \"'+value+'\"}';\n          xhr.send(data);\n                  }\n      }></Button>\n\n      <Text>{prediction}</Text>\n\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}